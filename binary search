questinscontroleler//
import {Request,Response} from 'express';
import { Questions,Answers,TestResult } from '../types/questionsType';
import{TestResultModel}  from  '../models/result';
import {sendEmail}   from './mailController';
import { IUser } from "../models/User"; 
import { CustomRequest } from "../middleware/auth"; 
const questionsData = require("../data/questions.json");

const allquestions: Questions[]=questionsData;
export const getQuestions=async(req:Request,res:Response)=>{
    try{
        res.status(200).json(allquestions);
    }
    catch (error: any) {
        console.error('error getting questions', error);
        res.status(500).json({ message: "failed fetch questions" });
    }
    };
export  const submitAnswers = async (req: CustomRequest, res: Response) => {
    try {
      const answers: Answers[] = req.body.answers;
      const startTime: Date = new Date(req.body.startTime);
      const endTime: Date = new Date();
      const totalTimeTaken = Math.floor((endTime.getTime() - startTime.getTime()) / 1000);
  
      const results: TestResult["results"] = [];
      let correctAnswerCount = 0;
  
      for (const answer of answers) {
        const question = allquestions.find((q) => q._id === answer.questionId);
        if (question) {
          const isCorrect = question.correctOption === answer.selectedOption;
          if (isCorrect) {
            correctAnswerCount++;
          }
          results.push({
            questionId: question._id!,
            isCorrect,
            selectedOption: answer.selectedOption,
            correctOption: question.correctOption,
            timeTaken: answer.timeTaken,
          });
        }
      }
  
      const finalResult: TestResult = {
        startTime,
        endTime,
        totalTimeTaken,
        correctAnswerCount,
        results,
      };
  
      const testResult = new TestResultModel({
         ...finalResult,
        user: req.user?._id, 
        });
        
      await testResult.save();
  
      const userEmail = req.user?.email || '';  
    if (!userEmail) {
      console.log('No user email found, unable to send email');
    } else {
      sendEmail(userEmail, finalResult);
    }
      res.status(200).json(finalResult);
    } catch (error: any) {
      console.error("Error submitting answer", error);
      res.status(500).json({ message: "Failed to submit answer" });
    }
  };
admincontroller.ts
import { Request, Response } from "express";
import User from "../../models/User";
import bcrypt from "bcryptjs";
import crypto from "crypto";
import { createJWT } from "../../utils/jwt";
import { TestResultModel } from '../../models/result';
import { authenticateUser, authorizeRoles } from "../../middleware/auth";
export const register = async (req: Request, res: Response) => {

try{
    const{name,email,password}=req.body;

    const existingUser= await User.findOne({email});
    if (existingUser) {
        return res.status(400).json({ message: "Admin already exists" });
    }
    
    const user = new User({
        name,
        email,
        password,
        role:"admin",
        dateOfJoining: new Date(),
      });
      const token = createJWT(user._id);
      await user.save();
      res.status(201).json({
        success: true,
        token,
        user: {
          id: user._id,
          name: user.name,
          email: user.email,
          dateOfJoining:user.dateOfJoining,
          role: user.role,
        },
      });
}catch(error:any){
    res.status(500).json({ message: "Server error", error });
}
}


export const getUser = async (req: Request, res: Response) => {
    try {
      const users = await User.find({ role: "user" }, "name email dateOfJoining").sort({ dateOfJoining: -1 });
      res.status(200).json(users);
    } catch (error) {
      res.status(500).json({ message: "Server Error", error });
    }
  };

export const getResult = async (req: Request, res: Response) => {
  try {
    const results = await TestResultModel.find().populate('user', 'name email');
    res.status(200).json(results);
  } catch (err) {
    res.status(500).json({ message: 'Failed to fetch test results' });
  }
};
result.ts
import mongoose, { Document, Schema } from "mongoose";

interface AnswerResult{
    questionId:string;
    isCorrect:boolean;
    selectedOption:string;
    correctOption:string;
    timeTaken:number;
}
interface TestResult extends Document{
    startTime:Date;
    endTime:Date;
    totalTimeTaken:number;
    correctAnswerCount:number;
    results:AnswerResult[];
}
const AnswerResultSchema:Schema=new Schema({                                                                                                          
questionId: { type: String, required: true },
  isCorrect: { type: Boolean, required: true },
  selectedOption: { type: String, required: true },
  correctOption: { type: String, required: true },
  timeTaken: { type: Number, required: true },
})

const TestResultSchema:Schema=new Schema({
    startTime: { type: Date, required: true },
    endTime: { type: Date, required: true },
    totalTimeTaken: { type: Number, required: true },
    correctAnswerCount: { type: Number, required: true },
    results: [AnswerResultSchema],
    user: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
})
const TestResultModel = mongoose.model<TestResult>('TestResult', TestResultSchema);
export { TestResultModel, TestResult };

adminRoutes.ts
import { register,getUser,getResult } from "../../controllers/adminControllers/adminController";
import { Router } from "express";
import { authenticateUser,authorizeRoles } from "../../middleware/auth";
const router = Router();

router.post("/register-admin", register);
router.get("/getAllUser",authenticateUser, authorizeRoles("admin"),getUser);
router.get("/getResult",authenticateUser, authorizeRoles("admin"),getResult);

export default router;


package.json
 npm install react-chartjs-2 chart.js

store.ts
import { configureStore } from '@reduxjs/toolkit'
import authReducer from '../features/authSlice';
import testReducer from '../features/testSlice';
import questionReducer from '../features/questionSlice';
import adminUserReducer from '../features/adminUserSlice';
import  fetchTestResults  from '../features/admin/fetchTestResults';
export const store = configureStore({
    reducer: {
     auth: authReducer,
     questions:questionReducer,
     test:testReducer,
     adminUsers: adminUserReducer,
     results:fetchTestResults,
    },
  })
  export type RootState = ReturnType<typeof store.getState>;

  export type AppDispatch = typeof store.dispatch;

adminUserSlice.ts
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import axios from 'axios';
const API_URL = import.meta.env.VITE_BACKEND_URL as string;
export interface UserData {
  name: string;
  email: string;
  dateOfJoining: string;
  isActive: boolean;    
  role: string; 
}

export const fetchAdminUsers = createAsyncThunk('admin/fetchUsers', async (_, thunkAPI) => {
    try {
      const token = localStorage.getItem('token');
  
      if (!token) {
        return thunkAPI.rejectWithValue('No token found');
      }
  
      const response = await axios.get<UserData[]>(`${API_URL}/api/admin/getAllUser`, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
  
      return response.data;
    } catch (error: any) {
      console.error('Error fetching users:', error);
      return thunkAPI.rejectWithValue(error.response?.data?.message || 'Failed to fetch users');
    }
  });
const adminUserSlice = createSlice({
  name: 'adminUsers',
  initialState: {
    users: [] as UserData[],
    loading: false,
    error: null as string | null,
  },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchAdminUsers.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchAdminUsers.fulfilled, (state, action) => {
        state.loading = false;
        state.users = action.payload;
      })
      .addCase(fetchAdminUsers.rejected, (state, action) => {
        state.loading = false;
        state.error = (action.payload as string) || "Error fetching users";
      });      
  },
});
export default adminUserSlice.reducer;

dashboard.tsx
import React, { useEffect, useState, useRef } from 'react';
import { useAppDispatch, useAppSelector } from '../../app/hooks';
import { fetchAdminUsers } from '../../features/adminUserSlice';
import Logo from "../../../public/static/img/logo.svg";
import { useNavigate } from "react-router-dom";
import { logout } from "../../features/authSlice";
import { Bar } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  Title,
  Tooltip,
  Legend,
  BarElement,
  CategoryScale,
  LinearScale,
} from 'chart.js';
import TestResult from './TestResult';

ChartJS.register(Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale);

const Dashboard: React.FC = () => {
  const dispatch = useAppDispatch();
  const { users, loading, error } = useAppSelector((state) => state.adminUsers);
  const [dropdownOpen, setDropdownOpen] = useState(false);
  const dropdownRef = useRef<HTMLDivElement | null>(null);
  const navigate = useNavigate();
  const [showResults, setShowResults] = useState(false);
  const [showChart, setShowChart] = useState(true);
  const [showAnalytics, setShowAnalytics] = useState(true);
  const [showStats, setShowStats] = useState(true);

  const user = useAppSelector((state) => state.auth.user);
  const userEmail = user?.email || 'U';
  const avtarLetter = userEmail.charAt(0).toUpperCase();

  const toggleDropdown = () => setDropdownOpen(!dropdownOpen);

  useEffect(() => {
    dispatch(fetchAdminUsers());
  }, [dispatch]);

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setDropdownOpen(false);
      }
    };
    if (dropdownOpen) {
      document.addEventListener("mousedown", handleClickOutside);
    }
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [dropdownOpen]);

  const handleResultsClick = () => {
    setShowResults(true);
    setShowChart(false);
    setShowAnalytics(false);
    setShowStats(false);
  };

  const handleUsersClick = () => {
    setShowResults(false);
    setShowChart(false);
    setShowAnalytics(false);
    setShowStats(false);
  };

  const handleDashboardClick = () => {
    setShowResults(false);
    setShowChart(true);
    setShowAnalytics(true);
    setShowStats(true);
  };

  const statsData = {
    totalUsers: users.length,
    activeUsers: users.filter(user => user.isActive).length,
    admins: users.filter(user => user.role === 'admin').length,
  };

  // Grouping users/admins by week
  const getWeekKey = (dateStr: string) => {
    const date = new Date(dateStr);
    const startOfYear = new Date(date.getFullYear(), 0, 1);
    const week = Math.ceil((((date.getTime() - startOfYear.getTime()) / 86400000) + startOfYear.getDay() + 1) / 7);
    return `Week ${week}`;
  };

  const weeklyUserData: Record<string, number> = {};
  const weeklyAdminData: Record<string, number> = {};

  users.forEach((user) => {
    const week = getWeekKey(user.dateOfJoining);
    if (user.role === 'admin') {
      weeklyAdminData[week] = (weeklyAdminData[week] || 0) + 1;
    } else {
      weeklyUserData[week] = (weeklyUserData[week] || 0) + 1;
    }
  });

  const sortedWeeks = Array.from(new Set([...Object.keys(weeklyUserData), ...Object.keys(weeklyAdminData)])).sort();

  const userChartData = {
    labels: sortedWeeks,
    datasets: [{
      label: 'Users Joined',
      data: sortedWeeks.map(week => weeklyUserData[week] || 0),
      backgroundColor: '#42a5f5',
      borderColor: '#42a5f5',
      borderWidth: 1,
    }]
  };

  const adminChartData = {
    labels: sortedWeeks,
    datasets: [{
      label: 'Admins Joined',
      data: sortedWeeks.map(week => weeklyAdminData[week] || 0),
      backgroundColor: '#ff7043',
      borderColor: '#ff7043',
      borderWidth: 1,
    }]
  };

  const chartOptions = {
    responsive: true,
    maintainAspectRatio: false,
  };

  return (
    <div className="dashboard-container">
      <nav className="sidebar">
        <div className="logo-container">
          <img src={Logo} alt="Logo" className="logo" />
        </div>
        <ul className="nav-links">
          <li><button onClick={handleDashboardClick}>Dashboard</button></li>
          <li><button onClick={handleUsersClick}>Users</button></li>
          <li><button onClick={handleResultsClick}>Results</button></li>
          <li><button onClick={() => navigate('/admin/dashboard')}>Settings</button></li>
        </ul>
      </nav>

      <div className="main-content">
        <header className="header">
          {(!showResults && !showAnalytics) && <h2>Registered Users</h2>}
          <div className="position-absolute top-0 end-0 m-4">
            <div className="position-relative" ref={dropdownRef}>
              <div
                onClick={toggleDropdown}
                className="primary-btn text-white rounded-circle d-flex align-items-center justify-content-center"
                style={{
                  width: "40px",
                  height: "40px",
                  cursor: "pointer",
                  fontWeight: "bold",
                  fontSize: "18px",
                }}
              >
                {avtarLetter}
              </div>

              {dropdownOpen && (
                <div
                  className="position-absolute end-0 mt-2 bg-white border rounded shadow-sm"
                  style={{ minWidth: "120px", zIndex: 10 }}
                >
                  <button
                    onClick={() => {
                      dispatch(logout());
                      navigate("/");
                    }}
                    className="dropdown-item text-start px-3 py-2 w-100 border-0 bg-transparent"
                  >
                    Logout
                  </button>
                </div>
              )}
            </div>
          </div>
        </header>

        {loading && <p>Loading...</p>}
        {error && <p>Error: {error}</p>}

        {showStats && (
          <div className="container py-4">
            <div className="row">
              <div className="col-lg-4 col-md-6 mb-4">
                <div className="card shadow-lg p-3 text-center">
                  <h5>Total Users</h5>
                  <p className="display-4">{statsData.totalUsers}</p>
                </div>
              </div>
              <div className="col-lg-4 col-md-6 mb-4">
                <div className="card shadow-lg p-3 text-center">
                  <h5>Active Users</h5>
                  <p className="display-4">{statsData.activeUsers}</p>
                </div>
              </div>
              <div className="col-lg-4 col-md-6 mb-4">
                <div className="card shadow-lg p-3 text-center">
                  <h5>Admins</h5>
                  <p className="display-4">{statsData.admins}</p>
                </div>
              </div>
            </div>
          </div>
        )}

        {!loading && users.length > 0 && !showResults && !showChart && (
          <div className="user-table">
            <table className="table">
              <thead>
                <tr>
                  <th>Name</th>
                  <th>Email</th>
                  <th>Date of Joining</th>
                </tr>
              </thead>
              <tbody>
                {users.map((user, idx) => (
                  <tr key={idx}>
                    <td>{user.name}</td>
                    <td>{user.email}</td>
                    <td>{new Date(user.dateOfJoining).toLocaleDateString()}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}

        {showAnalytics && (
          <div className="container py-4">
            <h3 className="text-center mb-4">User Analytics</h3>
            <div className="row">
              <div className="col-lg-6 mb-4">
                <div className="card shadow-lg p-3">
                  <h5 className="text-center">Users Joined Per Week</h5>
                  <div style={{ height: '300px' }}>
                    <Bar data={userChartData} options={chartOptions} />
                  </div>
                </div>
              </div>
              <div className="col-lg-6 mb-4">
                <div className="card shadow-lg p-3">
                  <h5 className="text-center">Admins Joined Per Week</h5>
                  <div style={{ height: '300px' }}>
                    <Bar data={adminChartData} options={chartOptions} />
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {showResults && <TestResult />}
      </div>
    </div>
  );
};

export default Dashboard;

 admin/testresult.tsx
import React, { useEffect, useState } from 'react';
import { Bar } from 'react-chartjs-2';
import {
  Chart,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
} from 'chart.js';
import { useAppDispatch, useAppSelector } from '../../app/hooks';
import { fetchTestResults } from '../../features/admin/fetchTestResults';

// Register chart components
Chart.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);

const TestResult: React.FC = () => {
  const dispatch = useAppDispatch();
  const { results, loading, error } = useAppSelector((state) => state.results);
  const [selectedResult, setSelectedResult] = useState<any | null>(null);

  useEffect(() => {
    dispatch(fetchTestResults());
  }, [dispatch]);

  const handleAnalyticsClick = (res: any) => {
    setSelectedResult(res);
  };

  const chartData = selectedResult
    ? {
        labels: ['Correct Answers', 'Total Time (sec)'],
        datasets: [
          {
            label: selectedResult.user?.name || 'User',
            data: [selectedResult.correctAnswerCount, selectedResult.totalTimeTaken],
            backgroundColor: ['#36a2eb', '#ff6384'],
          },
        ],
      }
    : null;

  return (
    <div className="container py-5">
      <h2 className="text-center mb-5 display-4 font-weight-bold text-primary">
        Test Results
      </h2>

      {loading && <p className="text-center text-muted">Loading...</p>}
      {error && <p className="text-center text-danger">{error}</p>}

      {!loading && results.length > 0 ? (
        <>
          <div className="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
            {results.map((res: any, idx: number) => (
              <div key={idx} className="col">
                <div className="card shadow-lg border-light rounded-3 p-3">
                  <div className="card-body">
                    <h3 className="card-title text-primary mb-4">
                      {res.user?.name || 'Unknown User'}
                    </h3>
                    <p><strong>Email:</strong> {res.user?.email || 'N/A'}</p>
                    <p><strong>Score:</strong> {res.correctAnswerCount}</p>
                    <p><strong>Total Time:</strong> {res.totalTimeTaken} seconds</p>
                    <p><strong>Start Time:</strong> {res.startTime ? new Date(res.startTime).toLocaleString() : 'N/A'}</p>
                    <p><strong>End Time:</strong> {res.endTime ? new Date(res.endTime).toLocaleString() : 'N/A'}</p>
                    <button
                      className="btn btn-outline-primary mt-3"
                      onClick={() => handleAnalyticsClick(res)}
                    >
                      View Analytics
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>

          {selectedResult && (
            <div className="mt-5">
              <h4 className="text-center mb-4">
                Analytics for {selectedResult.user?.name}
              </h4>
              <div style={{ maxWidth: '600px', margin: '0 auto' }}>
                <Bar data={chartData!} />
              </div>
            </div>
          )}
        </>
      ) : (
        !loading && <p className="text-center text-muted">No results found.</p>
      )}
    </div>
  );
};

export default TestResult;

testRules.tsx
import { Link, useNavigate } from "react-router-dom";
import { useState, useRef, useEffect } from "react";
import Logo from "../../../public/static/img/logo.svg";
import check from "../../../public/static/img/icon/ic-check.svg";
import { useAppSelector, useAppDispatch } from "../../app/hooks";
import { logout } from "../../features/authSlice";

const TestRules = () => {
  const [dropdownOpen, setDropdownOpen] = useState(false);
  const dropdownRef = useRef<HTMLDivElement | null>(null);
  const dispatch = useAppDispatch();
  const navigate = useNavigate();
  const user = useAppSelector((state) => state.auth.user);
  const userEmail = user?.email || "U";
  const avtarLetter = userEmail.charAt(0).toUpperCase();

  const [mediaStream, setMediaStream] = useState<MediaStream | null>(null);
  const videoRef = useRef<HTMLVideoElement | null>(null);
  const [mediaError, setMediaError] = useState<string | null>(null);

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setDropdownOpen(false);
      }
    };

    if (dropdownOpen) {
      document.addEventListener("mousedown", handleClickOutside);
    }

    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [dropdownOpen]);

  // Camera and microphone permission request
  useEffect(() => {
    const requestMediaAccess = async () => {
      try {
        const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
        setMediaStream(stream);
        if (videoRef.current) {
          videoRef.current.srcObject = stream;
        }
      } catch (err: any) {
        console.error("Error accessing media devices:", err);
        setMediaError("Camera and microphone access is required to proceed.");
      }
    };

    requestMediaAccess();

    return () => {
      mediaStream?.getTracks().forEach((track) => track.stop());
    };
  }, []);

  return (
    <section>
      {/* Dropdown avatar menu */}
      <div className="position-absolute top-0 end-0 m-4">
        <div className="position-relative" ref={dropdownRef}>
          <div
            onClick={() => setDropdownOpen(!dropdownOpen)}
            className="primary-btn text-white rounded-circle d-flex align-items-center justify-content-center"
            style={{
              width: "40px",
              height: "40px",
              cursor: "pointer",
              fontWeight: "bold",
              fontSize: "18px",
            }}
          >
            {avtarLetter}
          </div>
          {dropdownOpen && (
            <div
              className="position-absolute end-0 mt-2 bg-white border rounded shadow-sm"
              style={{ minWidth: "120px", zIndex: 10 }}
            >
              <button
                onClick={() => {
                  dispatch(logout());
                  navigate("/");
                }}
                className="dropdown-item text-start px-3 py-2 w-100 border-0 bg-transparent"
              >
                Logout
              </button>
            </div>
          )}
        </div>
      </div>

      {/* Main Content */}
      <section className="testrules-page-glass d-flex align-items-center justify-content-center py-5 px-3">
        <div className="rules-container p-4 p-md-5 glass-card text-dark">
          <div className="text-center mb-5">
            <img src={Logo} alt="Logo" className="img-fluid logo mb-3" />
            <h2 className="fw-bold display-6 gradient-text">Before You Begin</h2>
            <p className="text-muted fs-6">Please read all instructions carefully before starting the test.</p>
          </div>

          {/* Guidelines Section */}
          <div className="row gx-4 gy-4">
            <div className="col-md-6">
              <h5 className="text-primary mb-3"> General Guidelines</h5>
              <div className="rule-card">
                <p><img src={check} alt="check" className="check-icon me-2" />Multiple-choice questions.</p>
                <p><img src={check} alt="check" className="check-icon me-2" />One correct answer per question.</p>
                <p><img src={check} alt="check" className="check-icon me-2" />Navigation allowed, but timer is active.</p>
                <p><img src={check} alt="check" className="check-icon me-2" />Avoid refreshing the page.</p>
                <p><img src={check} alt="check" className="check-icon me-2" />Stable internet is essential.</p>
              </div>
            </div>
            <div className="col-md-6">
              <h5 className="text-primary mb-3">Timing & Scoring</h5>
              <div className="rule-card">
                <p><img src={check} alt="check" className="check-icon me-2" />Test is timed. Timer is always visible.</p>
                <p><img src={check} alt="check" className="check-icon me-2" />3 total questions — attempt all.</p>
                <p><img src={check} alt="check" className="check-icon me-2" />1 point per correct answer.</p>
                <p><img src={check} alt="check" className="check-icon me-2" />Negative marking may apply.</p>
                <p><img src={check} alt="check" className="check-icon me-2" />Unanswered = No score.</p>
              </div>
            </div>
          </div>

          {/* Camera and Audio Preview */}
          <div className="text-center my-5">
            <h5 className="text-primary mb-3">Camera & Microphone Check</h5>
            {mediaError ? (
              <p className="text-danger">{mediaError}</p>
            ) : (
              <video
                ref={videoRef}
                autoPlay
                playsInline
                muted
                className="rounded shadow"
                style={{ width: "300px", height: "200px", objectFit: "cover" }}
              />
            )}
          </div>

          {/* Start Button */}
          <div className="text-center mt-4">
            <Link to="/questions" className="btn start-btn btn-lg px-5 py-3 rounded-pill shadow-lg">
              Start Test
            </Link>
            <p className="mt-3 text-muted">Good luck, you’ve got this!</p>
          </div>
        </div>
      </section>
    </section>
  );
};

export default TestRules;


config.tsx
import Dashboard from "../pages/admin/Dashboard";
import AssessmentQuestions from "../pages/assessmentQuestions/AssessmentQuestions";
import TestRules from "../pages/TestInstructions/TestRules";
import TaskComplete from "../pages/taskCompleted/TaskCompleted";
import { ReactElement } from "react";
import TestResult from "../pages/admin/TestResult";
interface Route {
    path: string;
    element: ReactElement;
  }
export const routes: Record<string, Route[]>={
   
    admin:[
        { path:"/admin/dashboard",element:<Dashboard/>},
        { path:"/admin/results",element:<TestResult/>},
    ],
    user:[
        { path:"/rules",element:<TestRules/>},
        {path:"/questions" ,element:<AssessmentQuestions/>},
        {path:"/completed",element:<TaskComplete/>}
    ],

};


admin/fetchTestResultSlice.ts
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import axios from 'axios';
const API_URL = import.meta.env.VITE_BACKEND_URL as string;


export const fetchTestResults = createAsyncThunk('testResults/fetch', async (_, thunkAPI) => {
  const token = localStorage.getItem('token');
  
  if (!token) {
    return thunkAPI.rejectWithValue('No token found');
  }
  const response = await axios.get(`${API_URL}/api/admin/getResult`,
    {
      headers: {
          Authorization: `Bearer ${token}`,
      },
  }
  ); 
  return response.data;
});

const testResultSlice = createSlice({
  name: 'testResults',
  initialState: {
    results: [],
    loading: false,
    error: null as string | null,
  },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchTestResults.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchTestResults.fulfilled, (state, action) => {
        state.loading = false;
        state.results = action.payload;
      })
      .addCase(fetchTestResults.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message || 'Failed to fetch results';
      });
  },
});

export default testResultSlice.reducer;

admin/testResult.tsx
import React, { useEffect, useState } from 'react';
import { Bar } from 'react-chartjs-2';
import {
  Chart,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
} from 'chart.js';
import { useAppDispatch, useAppSelector } from '../../app/hooks';
import { fetchTestResults } from '../../features/admin/fetchTestResults';

// Register chart components
Chart.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);

const TestResult: React.FC = () => {
  const dispatch = useAppDispatch();
  const { results, loading, error } = useAppSelector((state) => state.results);
  const [selectedResult, setSelectedResult] = useState<any | null>(null);

  useEffect(() => {
    dispatch(fetchTestResults());
  }, [dispatch]);

  const handleAnalyticsClick = (res: any) => {
    setSelectedResult(res);
  };

  const chartData = selectedResult
    ? {
        labels: ['Correct Answers', 'Total Time (sec)'],
        datasets: [
          {
            label: selectedResult.user?.name || 'User',
            data: [selectedResult.correctAnswerCount, selectedResult.totalTimeTaken],
            backgroundColor: ['#36a2eb', '#ff6384'],
          },
        ],
      }
    : null;

  return (
    <div className="container py-5">
      <h2 className="text-center mb-5 display-4 font-weight-bold text-primary">
        Test Results
      </h2>

      {loading && <p className="text-center text-muted">Loading...</p>}
      {error && <p className="text-center text-danger">{error}</p>}

      {!loading && results.length > 0 ? (
        <>
          <div className="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
            {results.map((res: any, idx: number) => (
              <div key={idx} className="col">
                <div className="card shadow-lg border-light rounded-3 p-3">
                  <div className="card-body">
                    <h3 className="card-title text-primary mb-4">
                      {res.user?.name || 'Unknown User'}
                    </h3>
                    <p><strong>Email:</strong> {res.user?.email || 'N/A'}</p>
                    <p><strong>Score:</strong> {res.correctAnswerCount}</p>
                    <p><strong>Total Time:</strong> {res.totalTimeTaken} seconds</p>
                    <p><strong>Start Time:</strong> {res.startTime ? new Date(res.startTime).toLocaleString() : 'N/A'}</p>
                    <p><strong>End Time:</strong> {res.endTime ? new Date(res.endTime).toLocaleString() : 'N/A'}</p>
                    <button
                      className="btn btn-outline-primary mt-3"
                      onClick={() => handleAnalyticsClick(res)}
                    >
                      View Analytics
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>

          {selectedResult && (
            <div className="mt-5">
              <h4 className="text-center mb-4">
                Analytics for {selectedResult.user?.name}
              </h4>
              <div style={{ maxWidth: '600px', margin: '0 auto' }}>
                <Bar data={chartData!} />
              </div>
            </div>
          )}
        </>
      ) : (
        !loading && <p className="text-center text-muted">No results found.</p>
      )}
    </div>
  );
};

export default TestResult;







  
