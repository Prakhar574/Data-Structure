// src/components/Assessment/AssessmentQuestions.tsx (adjust path if needed)
import React, { useState, useEffect, useMemo, useCallback, useRef } from "react";
import { CountdownCircleTimer } from "react-countdown-circle-timer";
import CheckIcon from "../../../public/static/img/icon/ic-check.svg";
import Logo from "../../../public/static/img/logo.svg";
import { Link, useNavigate } from "react-router-dom";
import { useAppDispatch, useAppSelector } from "../../app/hooks";
import { fetchQuestions, selectQuestions, selectQuestionsLoading, selectQuestionsError } from "../../features/questionSlice";
import {
    startTest,
    recordAnswer,
    markQuestionSkipped,
    goToQuestion,
    submitTest,
    selectCurrentQuestionIndex,
    selectQuestionStatuses,
    selectSubmitLoading,
    selectAnswers,
    selectQuestionStatus,
    selectQuestionExpiryTime,
    selectAllQuestionIds,
    selectIsTestSubmitted,
} from "../../features/testSlice";
import { RootState } from "../../app/store";

const AssessmentQuestions = () => {
    const dispatch = useAppDispatch();
    const navigate = useNavigate();
    const intervalRef = useRef<NodeJS.Timeout | null>(null);

    // --- Selectors ---
    const questions = useAppSelector(selectQuestions);
    const loadingQuestions = useAppSelector(selectQuestionsLoading);
    const errorQuestions = useAppSelector(selectQuestionsError);
    const currentQuestionIndex = useAppSelector(selectCurrentQuestionIndex);
    const questionStatuses = useAppSelector(selectQuestionStatuses);
    const allAnswers = useAppSelector(selectAnswers);
    const allQuestionIds = useAppSelector(selectAllQuestionIds);
    const isSubmitting = useAppSelector(selectSubmitLoading);
    const isTestSubmitted = useAppSelector(selectIsTestSubmitted);
    const allExpiryTimes = useAppSelector((state: RootState) => state.test.questionExpiryTimes);

    const [selectedOption, setSelectedOption] = useState<number | null>(null);
    const [timerKey, setTimerKey] = useState<number>(0);

    // --- Memoized Values ---
    const currentQuestion = useMemo(() => {
        if (currentQuestionIndex >= 0 && currentQuestionIndex < questions.length) {
            return questions[currentQuestionIndex];
        }
        return null;
    }, [currentQuestionIndex, questions]);
    const currentQuestionId = useMemo(() => currentQuestion?._id, [currentQuestion]);
    const currentQuestionStatus = useAppSelector(state => currentQuestionId ? selectQuestionStatus(state, currentQuestionId) : 'pending');
    const currentQuestionExpiryTime = useAppSelector(state => currentQuestionId ? selectQuestionExpiryTime(state, currentQuestionId) : null);
    const isCurrentQuestionActive = currentQuestionStatus === 'active';
    const isCurrentQuestionAnswered = currentQuestionStatus === 'answered';
    const isCurrentQuestionSkipped = currentQuestionStatus === 'skipped';
    const isCurrentQuestionLocked = isCurrentQuestionAnswered || isCurrentQuestionSkipped;

    // --- Effects ---
    useEffect(() => {
        dispatch(fetchQuestions());
    }, [dispatch]);

    useEffect(() => {
        if (questions.length > 0) {
            dispatch(startTest({ questions }));
        }
    }, [dispatch, questions]);

    useEffect(() => {
        const checkTimers = () => {
            if (isTestSubmitted) {
                if (intervalRef.current) clearInterval(intervalRef.current);
                return;
            }

            const now = Date.now();
            Object.entries(allExpiryTimes).forEach(([qId, expiryTime]) => {
                if (expiryTime !== null && now >= expiryTime && questionStatuses[qId] === 'active') {
                    console.log(`Timer expired for ${qId}. Auto-submitting selected answer (if any) and proceeding.`);
                    if (currentQuestionId === qId && selectedOption !== null) {
                        dispatch(recordAnswer({ questionId: qId, selectedOption }));
                    } else {
                        dispatch(markQuestionSkipped({ questionId: qId }));
                    }

                    const lastQuestionId = allQuestionIds[allQuestionIds.length - 1];
                    if (qId === lastQuestionId) {
                        console.log("Timer expired on the last question. Auto-submitting test.");
                        dispatch(submitTest()).unwrap().then(() => navigate("/completed")).catch(console.error);
                    } else {
                        const expiredIndex = allQuestionIds.indexOf(qId);
                        const nextPendingIndex = allQuestionIds.findIndex((id, idx) => idx > expiredIndex && questionStatuses[id] === 'pending');
                        if (nextPendingIndex !== -1) {
                            dispatch(goToQuestion({ index: nextPendingIndex, questionId: allQuestionIds[nextPendingIndex] }));
                        } else {
                            const firstPendingIndex = allQuestionIds.findIndex(id => questionStatuses[id] === 'pending');
                            if (firstPendingIndex !== -1) {
                                dispatch(goToQuestion({ index: firstPendingIndex, questionId: allQuestionIds[firstPendingIndex] }));
                            }
                        }
                    }
                }
            });
        };

        if (intervalRef.current) {
            clearInterval(intervalRef.current);
        }

        if (questions.length > 0 && !isTestSubmitted) {
            intervalRef.current = setInterval(checkTimers, 1000);
            console.log("Background timer check started.");
        }

        return () => {
            if (intervalRef.current) {
                clearInterval(intervalRef.current);
                console.log("Background timer check stopped.");
            }
        };
    }, [allExpiryTimes, questionStatuses, dispatch, questions.length, isTestSubmitted, allQuestionIds, currentQuestionId, selectedOption, navigate]);

    useEffect(() => {
        if (currentQuestionId) {
            const status = questionStatuses[currentQuestionId];
            if (status === 'answered') {
                const recordedAnswer = allAnswers[currentQuestionId];
                setSelectedOption(recordedAnswer?.selectedOption ?? null);
            } else {
                setSelectedOption(null);
            }
        } else {
            setSelectedOption(null);
        }
        if (questionStatuses[currentQuestionId!] === 'active') {
            setTimerKey(prev => prev + 1);
        }
    }, [currentQuestionIndex, currentQuestionId, questionStatuses, allAnswers]);

    // --- Callbacks ---
    const handleOptionClick = (index: number) => {
        if (isCurrentQuestionActive) setSelectedOption(index);
    };

    const handleGoToQuestion = (index: number, questionId: string) => {
        if (index !== currentQuestionIndex) {
            dispatch(goToQuestion({ index, questionId }));
        }
    };

    const handleAnswerOrSkipCurrent = () => {
        if (!currentQuestionId || !isCurrentQuestionActive || isSubmitting) return;

        if (selectedOption !== null) {
            dispatch(recordAnswer({ questionId: currentQuestionId, selectedOption }));
        } else {
            dispatch(markQuestionSkipped({ questionId: currentQuestionId }));
        }

        const nextPendingIndex = allQuestionIds.findIndex((id, idx) => idx > currentQuestionIndex && questionStatuses[id] === 'pending');
        if (nextPendingIndex !== -1) {
            dispatch(goToQuestion({ index: nextPendingIndex, questionId: allQuestionIds[nextPendingIndex] }));
        }
    };

    const handleForceSubmit = () => {
        if (!isSubmitting) {
            dispatch(submitTest()).unwrap().then(() => navigate("/completed")).catch(console.error);
        }
    }

    // --- Render Logic ---
    if (loadingQuestions) return <div className="container vh-100 d-flex justify-content-center align-items-center">Loading questions...</div>;
    if (errorQuestions) return <div className="container vh-100 d-flex justify-content-center align-items-center">Error loading questions: {errorQuestions}</div>;
    if (!currentQuestion) return <div className="container vh-100 d-flex justify-content-center align-items-center">Loading assessment state...</div>;

    const remainingTimeForVisibleTimer = isCurrentQuestionActive && currentQuestionExpiryTime
        ? Math.max(0, Math.floor((currentQuestionExpiryTime - Date.now()) / 1000))
        : 0;

    return (
        <>
            {/* Assessment Questions Start */}
            <section className="container-fluid min-vh-100 d-flex align-items-center justify-content-center screen-bg">
                <div className="max-w-xxl mx-auto my-sm-5 my-4 px-3 w-100">
                    <Link to={"/"} className="d-flex align-items-center justify-content-center mb-3 w-fit mx-auto">
                        <img src={Logo} alt="Logo" className="img-fluid logo" />
                    </Link>
                    <div className="row bg-white py-5 px-sm-4 px-3 rounded-4 box-shadow lightgray-border">
                        <div className="col-lg-9 order-2 order-lg-1">
                            <h3 className="fs-20 fw-bold d-flex align-items-start gap-2 mb-4">
                                <span>Q{currentQuestionIndex + 1}.</span> {currentQuestion.question}
                                {isCurrentQuestionSkipped && <span className="badge bg-warning text-dark ms-2">Skipped</span>}
                                {isCurrentQuestionAnswered && <span className="badge bg-success text-white ms-2">Answered</span>}
                                {isCurrentQuestionActive && <span className="badge bg-primary text-white ms-2">Active</span>}
                            </h3>

                            <ul className="ps-0 list-unstyled">
                                {currentQuestion.options.map((option, index) => {
                                    const isSelected = selectedOption === index;
                                    let optionClass = `fs-18 lightgray-border rounded-3 p-3 d-flex align-items-start justify-content-between gap-3 mb-3 options`;
                                    let interactionStyle = { cursor: 'not-allowed' };

                                    if (isCurrentQuestionActive) {
                                        optionClass += ' cursor-pointer';
                                        interactionStyle = { cursor: 'pointer' };
                                        if (isSelected) optionClass += ' active';
                                    } else {
                                        optionClass += ' locked';
                                        if (isSelected) optionClass += ' active';
                                    }
                                    return (
                                        <li key={index} className={optionClass} onClick={() => handleOptionClick(index)} style={interactionStyle}>
                                            <div className="d-flex align-items-start gap-3">
                                                <div className={`fw-medium rounded-1 answer-option ${isSelected ? 'active' : ''}`}>
                                                    {String.fromCharCode(65 + index)}
                                                </div>
                                                {option}
                                            </div>
                                            {isSelected && (
                                                <img src={CheckIcon} alt="Selected Answer" width={24} className="align-self-center" />
                                            )}
                                        </li>
                                    );
                                })}
                            </ul>

                            {isCurrentQuestionActive && (
                                <button
                                    type="button"
                                    className="btn primary-btn text-white w-fit mt-4 fw-semibold px-5"
                                    onClick={handleAnswerOrSkipCurrent}
                                    disabled={isSubmitting || selectedOption === null}
                                    title={selectedOption === null ? "Select an option to confirm" : "Confirm Answer / Skip"}
                                >
                                    {selectedOption !== null ? "Confirm Answer" : "Skip Question"}
                                </button>
                            )}
                            {isCurrentQuestionLocked && (
                                <p className="mt-4 text-muted">This question is locked.</p>
                            )}
                        </div>

                        <div className="col-lg-3 order-1 order-lg-2 mb-lg-0 mb-4">
                            {isCurrentQuestionActive && currentQuestionExpiryTime && (
                                <div className="d-flex flex-column align-items-center justify-content-center gap-3 lightgray-border p-3 box-shadow rounded-3 mb-3">
                                    <div className="fs-2 primary-color fw-bold">
                                        <CountdownCircleTimer
                                            key={`timer-${currentQuestionId}-${timerKey}`}
                                            isPlaying={true}
                                            duration={remainingTimeForVisibleTimer}
                                            initialRemainingTime={remainingTimeForVisibleTimer}
                                            colors={["#3919EE", "#8875F5", "#B0A3F8"]}
                                            colorsTime={[60, 30, 10]}
                                            trailColor="#EAECF0"
                                            isSmoothColorTransition
                                            size={125}
                                            strokeWidth={9}
                                        >
                                            {({ remainingTime }) => remainingTime}
                                        </CountdownCircleTimer>
                                    </div>
                                    <h6 className="fw-bold mb-0">Time Left</h6>
                                </div>
                            )}
                            {isCurrentQuestionLocked && (
                                <div className="d-flex flex-column align-items-center justify-content-center gap-3 lightgray-border p-3 box-shadow rounded-3 mb-3">
                                    <div style={{ height: '130px', display: 'flex', alignItems: 'center', justifyContent: 'center'}}>
                                        <span className="text-muted">Timer N/A</span>
                                    </div>
                                    <h6 className="fw-bold mb-0">Question Locked</h6>
                                </div>
                            )}

                            <div className="accordion" id="allQuestions">
                                <div className="accordion-item lightgray-border rounded-3 p-3 bg-white box-shadow">
                                    <h2 className="accordion-header">
                                        <button className="accordion-button shadow-none bg-transparent fs-18 fw-bold p-0" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                                            Questions List
                                        </button>
                                    </h2>
                                    <div id="collapseOne" className="accordion-collapse collapse show" data-bs-parent="#allQuestions">
                                        <div className="accordion-body p-0 mt-3 pt-3 lightgray-border-t test">
                                            {questions.map((item, index) => {
                                                const qId = item._id;
                                                const status = questionStatuses[qId] || 'pending';
                                                const isLocked = status === 'answered' || status === 'skipped';
                                                const isAnswered = status === 'answered';
                                                const isActive = status === 'active';
                                                const isCurrent = index === currentQuestionIndex;
                                                let itemClass = `lightgray-border rounded-3 p-2 fs-14 fw-semibold d-flex align-items-center gap-3 justify-content-between mb-2 cursor-pointer`;
                                                if (isLocked) itemClass += isAnswered ? ' answered' : ' skipped';
                                                if (isActive) itemClass += ' active-question'; else if (status === 'pending') itemClass += ' pending-question';
                                                if (isCurrent) itemClass += ' current-question';

                                                return (
                                                    <div
                                                        key={item._id}
                                                        className={itemClass}
                                                        onClick={() => handleGoToQuestion(index, item._id)}
                                                    >
                                                        {`Question${index + 1}`}
                                                        {isAnswered && <img src={CheckIcon} alt="Answered" width={14} />}
                                                    </div>
                                                );
                                            })}
                                        </div>
                                    </div>
                                </div>
                            </div>

                            {/* Manual Submit Button */}
                            {!isTestSubmitted && (
                                <button
                                    type="button"
                                    className="btn primary-btn text-white w-fit mt-4 fw-semibold px-5"
                                    onClick={handleForceSubmit}
                                    disabled={isSubmitting}
                                >
                                    {isSubmitting ? "Submitting..." : "Submit Test"}
                                </button>
                            )}
                            {isTestSubmitted && (
                                <div className="mt-4">
                                    <p className="text-success fw-semibold">Test Submitted!</p>
                                    <button
                                        type="button"
                                        className="btn btn-outline-primary w-fit mt-2 fw-semibold px-4"
                                        onClick={() => navigate("/completed")}
                                    >
                                        View Results
                                    </button>
                                </div>
                            )}
                        </div>
                    </div>
                </div>
            </section>
            {/* Assessment Questions End */}
        </>
    );
};

export default AssessmentQuestions;

#include<stdio.h>
struct Array
{
int A[10];
int size;
int length;
};
void Display(struct Array arr)
{
int i;
printf("\nElements are\n");
for(i=0;i<arr.length;i++)
printf("%d ",arr.A[i]);
}
int Delete(struct Array *arr,int index)
{
int x=0;
int i;
if(index>=0 && index<arr->length)
{
x=arr->A[index];
for(i=index;i<arr->length-1;i++)
arr->A[i]=arr->A[i+1];
arr->length--;
return x;
}
return 0;
}
int main()
{
struct Array arr1={{2,3,4,5,6},10,5};
printf("%d",Delete(&arr1,0));
Display(arr1);
return 0;
}
