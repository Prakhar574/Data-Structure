ggimport React, { useEffect, useState } from "react";
 import { FormValues } from ".";
 import { FieldArrayWithId } from "react-hook-form";
 import { showBootstrapModal } from "../../../utils/utils";
 import VariantsImagesModal from "./VariantsImagesModal";
 import { DndContext, DragOverlay, useDrag, useDroppable, useSensors, useSensor, pointerSensor } from "@dnd-kit/core";
 import { SortableContext, sortableKeyboardCoordinates, useSortable } from "@dnd-kit/sortable";
 import { CSS } from "@dnd-kit/utilities";
 import { FaArrowsAltV } from "react-icons/fa";
 import { useDispatch } from "react-redux";
 import { productActions } from "../../redux/slices/productSlice";
 import { reorderVariantOptions } from "../../redux/thunks/product/product"; // Import the new thunk

 interface IProps {
  addVariant: (val: boolean) => void;
  variants: FieldArrayWithId<FormValues, "variants", "id">[];
  handleVariantImageDelete: (variantIndex: number, optionIndex: number, imgIndex: number) => void;
  handleVariantImageUpload: (
    e: React.ChangeEvent<HTMLInputElement>,
    variantIndex: number,
    optionIndex: number
  ) => void;
  getValues: any;
  fields: any;
  update: any;
  remove: any;
 }

 interface SortableItemProps {
  id: string;
  variantOption: any;
  vIndex: number;
  voIndex: number;
  handleVariantImageDelete: (variantIndex: number, optionIndex: number, imgIndex: number) => void;
  setSelectedVariatOption: React.Dispatch<React.SetStateAction<any>>;
  update: any;
  remove: any;
 }

 const SortableVariantOption: React.FC<SortableItemProps> = ({
  id,
  variantOption,
  vIndex,
  voIndex,
  handleVariantImageDelete,
  setSelectedVariatOption,
  update,
  remove,
 }) => {
  const {
    attributes,
    listeners,
    setNodeRef,
    transform,
    transition,
  } = useSortable({ id: id });

  const style = {
    transform: CSS.Transform.toString(transform),
    transition,
  };

  return (
    <tr ref={setNodeRef} style={style} {...attributes} {...listeners}>
      <td className="pb-3 pt-4">
        <FaArrowsAltV className="cursor-grab" />
      </td>
      <td className="pb-3 pt-4">{variantOption.variantSku}</td>
      <td className="pb-3 pt-4">{variantOption.name}</td>
      <td className="pb-3 pt-4">{variantOption.variantInventory}</td>
      <td className="pb-3 pt-4">-</td>
      <td className="pb-3 pt-4">{variantOption.variantPrice}</td>
      <td className="pb-3 pt-4">
        <div
          className="cursor-pointer"
          onClick={() =>
            setSelectedVariatOption({
              ...variantOption,
              selectedVariatIndex: vIndex,
              selectedVariatOptionIndex: voIndex,
            })
          }
        >
          Show Images
        </div>
      </td>
      <td className="pb-3 pt-4 text-nowrap">
        <span className="shadow-sm rounded bg-white px-2 py-1 cursor-pointer">
          <img src="/static/img/edit-ic.svg" alt="Edit Icon" />
        </span>
        <span
          className="shadow-sm rounded bg-white px-2 py-1 cursor-pointer mx-2"
          onClick={() => {
            const updatedOptions = [...(update.items[vIndex]?.options || [])];
            updatedOptions.splice(voIndex, 1);
            if (!updatedOptions.length) {
              remove(vIndex);
            } else {
              update(vIndex, {
                ...update.items[vIndex],
                options: updatedOptions,
              });
            }
          }}
        >
          <img src="/static/img/delete-ic.svg" alt="Delete Icon" />
        </span>
        <span className="shadow-sm rounded bg-white px-2 py-1 cursor-pointer">
          <img src="/static/img/ic-delist.svg" alt="Delist Icon" width={11} />
        </span>
      </td>
    </tr>
  );
 };

 const Variants: React.FC<IProps> = ({
  addVariant,
  variants,
  handleVariantImageDelete,
  handleVariantImageUpload,
  getValues,
  fields,
  update,
  remove,
 }) => {
  const [selectedVariatOption, setSelectedVariatOption] = useState<any>(null);
  const dispatch = useDispatch();
  const sensors = useSensors(useSensor(pointerSensor, { activationConstraint: { distance: 5 } }));

  useEffect(() => {
    if (selectedVariatOption) {
      showBootstrapModal("showImagesModal");
    }
  }, [selectedVariatOption]);

  const handleDragEnd = (event: any, vIndex: number) => { // Pass vIndex to handleDragEnd
    const { active, over } = event;

    if (active.id !== over?.id) {
      const [activeVIndexStr, optionIndexStrActive] = active.id.split("-");
      const [overVIndexStr, optionIndexStrOver] = over?.id.split("-") || ["", ""];

      const activeVIndex = parseInt(activeVIndexStr, 10);
      const overVIndex = parseInt(overVIndexStr, 10);
      const optionIndexActive = parseInt(optionIndexStrActive, 10);
      const optionIndexOver = parseInt(optionIndexStrOver, 10);

      // Only reorder if the dragged item and the drop target are within the same variant
      if (activeVIndex === vIndex && overVIndex === vIndex && variants[vIndex]?.options) {
        const newOptions = [...variants[vIndex].options];
        const [draggedOption] = newOptions.splice(optionIndexActive, 1);
        newOptions.splice(optionIndexOver, 0, draggedOption);

        update(vIndex, { ...fields[vIndex], options: newOptions });

        // Dispatch the action to update the backend for this specific variant
        dispatch(
          reorderVariantOptions({
            productId: getValues("id"),
            variantId: variants[vIndex].id,
            newOrder: newOptions.map((option) => option.id),
          })
        );
      }
    }
  };

  return (
    <div>
      <fieldset className="mb-4">
        <div className="d-flex justify-content-between align-items-center my-4">
          <legend>Variants</legend>
          <button
            type="button"
            className="btn w-fit fs-14 d-flex align-items-center gap-1 primary-text border-primary text-nowrap"
            data-bs-toggle="modal"
            data-bs-target="#variantModal"
            onClick={() => addVariant(true)}
          >
            <div className="bg-white d-flex align-items-center justify-content-center p-1 rounded fw-medium">
              <img src="/static/img/add-ic.svg" alt="Add Icon" className="bg-transparent" />
            </div>
            Add Variants
          </button>
        </div>
        {variants.map((variant, vIndex) => (
          <div key={vIndex} className="overflow-x-auto table-main">
            <h6>{variant.name}</h6>
            <DndContext key={`dnd-context-${vIndex}`} sensors={sensors} onDragEnd={(event) => handleDragEnd(event, vIndex)}>
              <SortableContext items={variant.options.map((option) => `<span class="math-inline">\{vIndex\}\-</span>{option.id}`)}>
                <table className="table">
                  <thead>
                    <tr>
                      <th scope="col" className="fw-normal mb-3 text-nowrap">
                        <FaArrowsAltV />
                      </th>
                      <th scope="col" className="fw-normal mb-3 text-nowrap">
                        SKU
                      </th>
                      <th scope="col" className="fw-normal mb-3 text-nowrap">
                        variant Options
                      </th>
                      <th scope="col" className="fw-normal mb-3 text-nowrap">
                        Inventory
                      </th>
                      <th scope="col" className="fw-normal mb-3 text-nowrap">
                        Available
                      </th>
                      <th scope="col" className="fw-normal mb-3 text-nowrap">
                        Price
                      </th>
                      <th scope="col" className="fw-normal mb-3 text-nowrap">
                        Upload Media
                      </th>
                      <th scope="col" className="fw-normal mb-3 text-nowrap">
                        Action
                      </th>
                    </tr>
                  </thead>
                  <tbody>
                    {variant.options.map((variantOption, voIndex) => (
                      <SortableVariantOption
                        key={variantOption.id}
                        id={`<span class="math-inline">\{vIndex\}\-</span>{variantOption.id}`}
                        variantOption={variantOption}
                        vIndex={vIndex}
                        voIndex={voIndex}
                        handleVariantImageDelete={handleVariantImageDelete}
                        setSelectedVariatOption={setSelectedVariatOption}
                        update={update}
                        remove={remove}
                      />
                    ))}
                  </tbody>
                </table>
              </SortableContext>
            </DndContext>
          </div>
        ))}
      </fieldset>
      {/* Show Images Modal Start */}
      <VariantsImagesModal
        setSelectedVariatOption={setSelectedVariatOption}
        selectedVariatOption={selectedVariatOption}
        handleVariantImageDelete={handleVariantImageDelete}
        handleVariantImageUpload={handleVariantImageUpload}
        getValues={getValues}
      />
      {/* Show Images Modal End */}
    </div>
  );
 };

 export default Variants;
